% version: 1
% doc:
%   Provides functions to handle iterables.


/**
 * Produces an infinite iterable by repeatedly applying [[fn]] to a
 * [[seed]].
 *
 * That is, `iterate(s, f)` is equivalent to
 * `yield s; yield f(s); yield f(f(s)); yield f(f(f(s))); ...`.
 */
function* iterate(seed, fn) {
  let mutable value = seed;
  repeat {
    yield value;
    value <- fn(value);
  }
}

/**
 * Constructs an empty iterable.
 */
function* empty() {}

/**
 * Transforms every item of an iterable with an unary function.
 */
function* map(iterable, fn) {
  foreach value of iterable {
    yield fn(value);
  }
}

/**
 * Transforms every item of an iterable with an unary function
 * that's expected to return new iterables. All of these iterables
 * will be concatenated together.
 */
function* flatMap(iterable, fn) {
  foreach value of iterable {
    yield* fn(value);
  }
}

/**
 * Takes only the values of the iterable that pass the given predicate.
 */
function* filter(iterable, predicate) {
  foreach value of iterable {
    if predicate(value) {
      yield value;
    }
  }
}

