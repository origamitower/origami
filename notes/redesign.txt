import "foo" exposing everything as f, _ + _ as _ / _;
export "foo" exposing everything;

// data modelling
data F(a :: b, mutable c :: d);
union G {
  F(a :: b, mutable c :: d);
}


// interfaces, extensions, OOP
interface Functor<F<_>> {
  member <A, B>(self :: F<A>).map(f :: A -> B) -> F<B>;
}

extend F {
  interface Functor {
    member self.map(f) = new F(self.a.map(f), self.c);
  }

  static hello(...a) = new F(a);
}

Functor.map(F.hello(1, 2, 3), _ + 1);
(F.hello(1, 2, 3) as Functor).map(_ + 1);


// Effects
effect IO {
  member self.read(k :: string -> Void);
  member self.write(s :: string, k :: Void -> Void);
}

let stdin = mutable [];
let stdout = mutable [];
let io = handler IO {
  member self.read(k) = k(stdin.shift());
  member self.write(s, k) { stdout.push(s); k(); }
}

// Literals
[a, ...b];
{ a: b, ...c };
"foo";
1000;
1000.00;
@f64 1000.00;
1000.00 as Float64;
10/2;
true; false;
@map [a => b; c => d];
@set [a; b; c; d];

// Functions
function a + b { }
async function foo(a, b: c = 1) {}
*function bar(a, ...b) {}


// -------------------------
Expressions:
  load: local, free
  call, new, send
  get, set
  match, if
  values: array, record, lambda, string, decimal, integer, bool
  yield, yield*
  do

Statements:
  let, let mutable
  if, match
  for, repeat
  expr
