% language: origami

exception UndefinedBinding(name :: String) {
  "%s{name} is not defined" |> string.format({ name });
}

union Expression {
  Add(left :: Expression, right :: Expression);
  Sub(left :: Expression, right :: Expression);
  Mul(left :: Expression, right :: Expression);
  Div(left :: Expression, right :: Expression);
  Let(name :: String, value :: Expression, body :: Expression);
  Var(name :: String);
  Num(value :: Float64);
}

record Environment(parent :: Optional<Environment>, bindings :: Map<string, Float64>);


define root =
  new Environment(Optional.None, new Map());


function add_binding(env, name, value) {
  new Environment(env.parent, env.bindings.add(name, value));
}


function lookup(env, name) {
  env.bindings.try_get(name);
}


function evaluate(expr, env) {
  match expr {
    case Expression.Add(l, r):
      evaluate(l, env) + evaluate(r, env);

    case Expression.Sub(l, r):
      evaluate(l, env) - evaluate(r, env);

    case Expression.Mul(l, r):
      evaluate(l, env) * evaluate(r, env);

    case Expression.Div(l, r):
      evaluate(l, env) / evaluate(r, env);

    case Expression.Let(name, initializer, body):
      let value = evaluate(initializer, env);
      evaluate(body, add_binding(env, name, value));

    case Expression.Var(name):
      match lookup(env, name) {
        case Optional.Some(v): v;
        case Optional.None: throw UndefinedBinding(name);
      }

    case Expression.Num(n):
      n;
  }
}

function main(_) *{
  !write_line("let x = 2 + 3 in x * x + 1");
  
  let { Add, Sub, Mul, Div, Let, Var, Num } = Expression;
  let expr = new Let("x", new Add(new Num(2), new Num(3)),
    new Mul(new Var("x"), new Add(new Var("x"), new Num(1)))
  );

  !write_line("==> %d{result}" |> string.format({ result: evaluate(expr, root) }));
}