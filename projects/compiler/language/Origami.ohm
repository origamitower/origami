%[
open Origami.Compiler.Syntax.Range
open Origami.Compiler.Syntax.Cst
open Fable.Core
open Fable.Core.JsInterop
open System.Text.RegularExpressions

let positionToRange (m:Position) : Range =
  let offset = m.offset()
  let position = m.position()
  R_Known({
    span = (offset.start, offset.``end``)
    start = (position.start.line, position.start.column)
    stop = (position.``end``.line, position.``end``.column)
    source = m.sourceString
    filename = m.filename
  })

let range (m:Meta) = positionToRange m.source

let crange (m:Meta) idx = positionToRange m.children.[idx]

let contract (x:Contract option) =
  match x with
  | Some v -> v
  | None -> C_Unknown(R_Unknown)

let assocLeft f (initial:'u) (xs:'t[]) =
  match List.ofArray xs with
  | [] -> initial
  | first :: rest -> List.fold f (f initial first) rest

let binaryL =
  assocLeft <| fun l (op, r) -> BinaryExpr(R_Unknown, op, l, r)

let fixDigits xs =
  xs |> Array.filter (fun x -> x <> "_")
     |> String.concat ""


[<Emit("parseInt($1, $0)")>]
let parseInt radix x = jsNative

[<Emit("JSON.parse($0)")>]
let parseJsonStringPrim s = jsNative

let parseJsonString (s:string) =
  let s = Regex.Replace(Regex.Replace(s, "\\r", "\\r"), "\\n", "\\n")
  in parseJsonStringPrim s

let makeInt r xs = xs |> fixDigits |> parseInt r |> (fun x -> x.ToString())
let octal = makeInt 8
let binary = makeInt 2
let hex = makeInt 16
let decimal = makeInt 10

let trimSome (n:int) (s:string) =
  let pattern = sprintf "^\\s{0,%d}" n
  Regex.Replace(s, pattern, "")

let fixRawString (m:Range) xs =
  let str = String.concat "" xs
  let trimmer = match m with
                | R_Known i -> trimSome (snd i.start)
                | R_Unknown -> id
  let lines = str.Split([|'\n'|])
  

  lines |> Array.map trimmer
        |> String.concat "\n"

]%

Origami : Module {
  Module
    = Header* m:Meta module_ id:ModuleId defs:Definition* end
      %[
        {
          range = range meta
          meta = m
          id = id
          declarations = defs
        }
      ]%

  Meta
    = doc:doc_comment?
      %[
        {
          documentation = doc
        }
      ]%

  ModuleId
    = n:QualifiedName
      %[
        {
          range = range meta
          names = n
        }
      ]%



  // -- Headers -------------------------------------------------------
  Header
    = "%" id ":" HeaderExpr

  HeaderExpr
    = Decimal
    | Integer
    | String
    | Boolean
    | id


  // -- Definitions ---------------------------------------------------
  Definition
    = ImportDefinition
    | ExportDefinition
    | StructureDefinition
    | UnionDefinition
    | FunctionDefinition
    | LetDefinition
    | FFIDefinition


  // --- Modules
  ImportDefinition
    = import_ id:ModuleId exposing_ binds:NonemptyListOf<Binding, ",">
      %[ Import(range meta, id, binds) ]%

  Binding
    = e:Signature as_ l:Signature
      %[ IB_Alias(range meta, e, l) ]%

    | l:everything_ as_ Name
      %[ IB_Open(range meta, l) ]%

    | l:Signature
      %[ IB_Alias(range meta, l, l) ]%

  ExportBinding
    = e:Signature as_ a:Signature
      %[ EB_Alias(range meta, e, a) ]%

    | everything_ as_ n:Name
      %[ EB_Object(range meta, n) ]%

    | everything_
      %[ EB_ReExport(range meta) ]%

    | n:Signature
      %[ EB_Alias(range meta, n, n) ]%

  ExportLocalBinding
    = l:Signature as_ a:Signature
      %[ ELB_Alias(range meta, l, a) ]%

    | l:Signature
      %[ ELB_Alias(range meta, l, l) ]%

  Signature
    = "(" op:UnaryOp n:Name ")"
      %[ BS_Unary(range meta, op, n) ]%

    | "(" l:Name op:BinaryOp r:Name ")"
      %[ BS_Binary(range meta, op, l, r) ]%

    | "(" o:Name "[" k:Name "]" "<-" v:Name ")"
      %[ BS_AtPut(range meta, o, k, v) ]%

    | "(" o:Name "[" k:Name "]" ")"
      %[ BS_At(range meta, o, k) ]%

    | n:Name
      %[ BS_Name(range meta, n) ]%

  ExportDefinition
    = export_ id:ModuleId exposing_ binds:NonemptyListOf<ExportBinding, ",">
      %[ Export(range meta, id, binds) ]%

    | export_ binds:NonemptyListOf<ExportLocalBinding, ",">
      %[ ExportLocal(range meta, binds) ]%


  // --- FFI
  FFIDefinition
    = m:Meta external_ id:String "{" sigs:ExternalSignature+ "}"
      %[ FFI(range meta, m, id, sigs) ]%

  ExternalSignature
    = m:Meta function_ k:FunctionKind signature:FunctionSignature t:Contract? ffi:ExternalSignatureName
      %[ FFI_Function(range meta, m, k, signature, contract t, ffi) ]%

    | m:Meta define_ n:Name t:Contract? ffi:ExternalSignatureName
      %[ FFI_Define(range meta, m, n, contract t, ffi) ]%


  ExternalSignatureName
    = "=" n:string
      %[ box <| fun _ -> { range = crange meta 1; value = n } ]%

  // --- Data
  StructureDefinition
    = m:Meta record_ ctor:DataConstructor
      %[ 
        let (name, fields) = ctor
        in Record(range meta, m, name, fields) 
      ]%

  UnionDefinition
    = m:Meta union_ n:Name "{" cs:UnionCase+ "}"
      %[ Union(range meta, m, n, cs) ]%

  DataConstructor
    = n:Name "(" fields:ListOf<Field, ";"> ";"? ")"
      %[ (n, fields) ]%

  UnionCase
    = m:Meta ctor:DataConstructor
      %[
        let (name, fields) = ctor
        in { range = range meta; meta = m; name = name; fields = fields }
      ]%

  Field
    = m:Meta mut:mutable_? n:Name t:Contract? i:Initializer
      %[
        {
          range = range meta
          meta = m
          isMutable = Option.isSome mut
          name = n
          contract = contract t
          initializer = i
        }
      ]%

  Initializer
    = "=" e:Expression    %[ Some e ]%
    |                     %[ None ]%

  // --- Functions
  FunctionDefinition
    = m:Meta function_ k:FunctionKind signature:FunctionSignature t:Contract? b:FunctionBody
      %[ Function(range meta, m, k, signature, contract t, b) ]%

  FunctionKind
    = "*"     %[ FK_Generator ]%
    |         %[ FK_Function ]%

  FunctionSignature
    = op:UnaryOp p:PParam
      %[ FS_Unary(range meta, op, p) ]%

    | l:PParam op:BinaryOp r:PParam
      %[ FS_Binary(range meta, op, l, r) ]%

    | o:PParam "[" k:Param "]" "<-" v:PParam
      %[ FS_AtPut(range meta, o, k, v) ]%

    | o:PParam "[" k:Param "]"
      %[ FS_At(range meta, o, k) ]%

    | n:Name ps:ParamList
      %[ FS_Named(range meta, n, ps) ]%

  ParamList
    = "(" ps:NonemptyListOf<Param, ","> "," "..." s:Param ")"
      %[ FS_Variadic(range meta, ps, s) ]%

    | "(" "..." s:Param ")"
      %[ FS_Variadic(range meta, [||], s) ]%

    | "(" ps:NonemptyListOf<Param, ","> "," ns:NonemptyListOf<NamedParam, ","> ")"
      %[ FS_Keyword(range meta, ps, ns) ]%

    | "(" ns:NonemptyListOf<NamedParam, ","> ")"
      %[ FS_Keyword(range meta, [||], ns) ]%

    | "(" ps:ListOf<Param, ","> ")"
      %[ FS_Fixed(range meta, ps) ]%

  PParam
    = "(" n:Name t:Contract ")"
      %[
        {
          range = range meta
          name = n
          contract = t
        }
      ]%

    | n:Name
      %[
        {
          range = range meta
          name = n
          contract = contract None
        }
      ]%

  Param
    = n:Name t:Contract
      %[
        {
          range = range meta
          name = n
          contract = t
        }
      ]%

    | n:Name ~":"
      %[
        {
          range = range meta
          name = n
          contract = contract None
        }
      ]%

  NamedParam
    = k:Name ":" n:Name t:Contract? i:Initializer
      %[
        {
          range = range meta
          key = k
          name = n
          contract = contract t
          initializer = i
        }
      ]%

  FunctionBody
    = "=" e:Expression        %[ [| e |] ]%
    | "{" xs:Statement* "}"   %[ xs ]%


  LetDefinition
    = m:Meta define_ n:Name t:Contract? "=" e:Expression ";"
      %[ Define(range meta, m, n, contract t, e) ]%


  // -- Statements ----------------------------------------------------
  Statement
    = LetStatement
    | AssertStatement
    | LoopStatement
    | Match
    | DoBlock
    | AssignStatement
    | e:Expression ";"  %[ ExprStmt(range meta, e) ]%

  LetStatement
    = let_ mut:mutable_? n:Name t:Contract? "=" e:Expression ";"
      %[
        match mut with
        | Some _ -> LetMutable(range meta, n, contract t, e)
        | None   -> Let(range meta, n, contract t, e)
      ]%

  AssertStatement
    = assert_ e:Expression ";"
      %[ Assert(range meta, e) ]%

    | unreachable_ s:string ";"
      %[ Unreachable(range meta, { range = crange meta 1; value = s }) ]%


  LoopStatement
    = for_ each_ n:Name t:Contract? of_ e:Expression b:Block
      %[ Foreach(range meta, n, contract t, e, b) ]%

    | repeat_ while_ e:Expression b:Block
      %[ While(range meta, e, b) ]%

    | repeat_ until_ e:Expression b:Block
      %[ Until(range meta, e, b) ]%

    | repeat_ with_ n:Name t:Contract? from_ s:Expression to_ e:Expression b:Block
      %[ For(range meta, n, contract t, s, e, b) ]%

    | repeat_ with_ n:Name t:Contract? from_ s:Expression to_ e:Expression by_ by:Expression b:Block
      %[ ForBy(range meta, n, contract t, s, e, by, b) ]%

    | repeat_ b:Block
      %[ Repeat(range meta, b) ]%

  AssignStatement
    = n:Name "<-" e:Expression ";"
      %[ Assign(range meta, n, e) ]%

  Block
    = "{" xs:Statement* "}"     %[ xs ]%


  // -- Expression ----------------------------------------------------
  Expression
    = IfExpression
    | PipeExpression

  IfExpression
    = if_ t:Expression then_ c:Expression else_ a:Expression
      %[ IfThenElse(range meta, t, c, a) ]%

  PipeExpression
    = l:PipeExpression "|>" r:BinaryExpression
      %[ Pipe(range meta, l, r) ]%

    | YieldExpression

  YieldExpression
    = yield_ "*" e:SendExpression   %[ YieldAll(range meta, e) ]%
    | yield_ e:SendExpression       %[ Yield(range meta, e) ]%
    | BinaryExpression

  BinaryExpression
    = l:UnaryExpression t:BinaryExpressionTrail<and_>+    %[ binaryL l t ]%
    | l:UnaryExpression t:BinaryExpressionTrail<or_>+     %[ binaryL l t ]%

    | l:UnaryExpression t:BinaryExpressionTrail<"++">+    %[ binaryL l t ]%
    | l:UnaryExpression t:BinaryExpressionTrail<">>">+    %[ binaryL l t ]%
    | l:UnaryExpression t:BinaryExpressionTrail<"<<">+    %[ binaryL l t ]%

    | l:UnaryExpression in_ r:UnaryExpression
      %[ BinaryExpr(range meta, OpIn(crange meta 1), l, r) ]%

    | l:UnaryExpression "-->" r:UnaryExpression
      %[ BinaryExpr(range meta, OpImplies(crange meta 1), l, r) ]%

    | l:UnaryExpression t:BinaryExpressionTrail<"+">+     %[ binaryL l t ]%
    
    | l:UnaryExpression "**" r:UnaryExpression
      %[ BinaryExpr(range meta, OpPower(crange meta 1), l, r) ]%

    | l:UnaryExpression t:BinaryExpressionTrail<"*">+     %[ binaryL l t ]%

    | l:UnaryExpression "-" r:UnaryExpression
      %[ BinaryExpr(range meta, OpMinus(crange meta 1), l, r) ]%

    | l:UnaryExpression "/" r:UnaryExpression
      %[ BinaryExpr(range meta, OpDivide(crange meta 1), l, r) ]%

    | l:UnaryExpression "==" r:UnaryExpression
      %[ BinaryExpr(range meta, OpEqual(crange meta 1), l, r) ]%

    | l:UnaryExpression "/=" r:UnaryExpression
      %[ BinaryExpr(range meta, OpNotEqual(crange meta 1), l, r) ]%

    | l:UnaryExpression ">=" r:UnaryExpression
      %[ BinaryExpr(range meta, OpGreaterOrEqual(crange meta 1), l, r) ]%

    | l:UnaryExpression "<=" r:UnaryExpression
      %[ BinaryExpr(range meta, OpLessOrEqual(crange meta 1), l, r) ]%

    | l:UnaryExpression ">" r:UnaryExpression
      %[ BinaryExpr(range meta, OpGreater(crange meta 1), l, r) ]%

    | l:UnaryExpression "<" r:UnaryExpression
      %[ BinaryExpr(range meta, OpLess(crange meta 1), l, r) ]%

    | UnaryExpression

  BinaryExpressionTrail<operator>
    = op:operator o:UnaryExpression
      %[ (op, o) ]%

  UnaryExpression
    = "!" e:SimpleUnaryExpression   %[ EffectExpr(range meta, e) ]%
    | SimpleUnaryExpression

  SimpleUnaryExpression
    = not_ e:SendExpression         
      %[ UnaryExpr(range meta, OpNot(crange meta 0), e) ]%

    | SendExpression

  SendExpression
    = s:SendExpression k:SendContinuation   %[ k (range meta) s ]%
    | UpdateExpression

  SendContinuation
    = a:ArgList
      %[ box <| fun r m -> Call(r, m, a) ]%

    | "." msg:Name a:ArgList
      %[ box <| fun r m -> MethodCall(r, m, msg, a) ]%

    | "[" k:Expression "]" "<-" v:Expression
      %[ box <| fun r o -> AtPut(r, o, k, v) ]%

    | "[" k:Expression "]"
      %[ box <| fun r o -> At(r, o, k) ]%

    | "." n:Name "<-" v:Expression
      %[ box <| fun r o -> Set(r, o, n, v) ]%

    | "." n:Name
      %[ box <| fun r o -> Get(r, o, n) ]%

  UpdateExpression
    = m:MemberExpression "<-" e:Expression
      %[
        match m with
        | Get(_, o, p) -> Set(range meta, o, p, e)
        | At(_, o, k) -> AtPut(range meta, o, k, e)
        | _ -> 
          failwithf "a <- b is only valid in an expression if `a` is a member expression %s" (range meta).ToLocationString
      ]%
    | MemberExpression

  MemberExpression
    = o:MemberExpression "[" k:Expression "]"
      %[ At(range meta, o, k) ]%

    | o:MemberExpression "." n:Name
      %[ Get(range meta, o, n) ]%

    | NewExpression

  NewExpression
    = new_ c:MemberExpression a:ArgList
      %[ New(range meta, c, a) ]%

    | new_ c:MemberExpression r:RecordPairs
      %[ NewRecord(range meta, c, r) ]%

    | PrimaryExpression

  PrimaryExpression
    = FunctionExpression
    | Match
    | DoBlock
    | ~reserved_var n:Name    %[ Var(range meta, n) ]%
    | "_"                     %[ PartialHole(range meta) ]%
    | l:Literal               %[ LitExpr(range meta, l) ]%
    | ArrayExpression
    | RecordExpression
    | "(" e:Expression ")"    %[ Parens(range meta, e) ]%

  ArrayExpression
    = mut:mutable_? "[" items:ListOf<ArrayItem, ","> "]"
      %[ ArrayExpr(range meta, Option.isSome mut, items) ]%

  ArrayItem
    = "..." e:Expression    %[ AI_Spread(range meta, e) ]%
    | e:Expression          %[ AI_Item(range meta, e) ]%

  RecordExpression
    = mut:mutable_? pairs:RecordPairs
      %[ RecordExpr(range meta, Option.isSome mut, pairs) ]%

  RecordPairs
    = "{" ps:ListOf<RecordPair, ","> "}"    %[ ps ]%

  RecordPair
    = n:Name ":" e:Expression
      %[
        {
          range = range meta
          key = n
          value = e
        }
      ]%

  FunctionExpression
    = p:ParamList k:FunctionKind t:Contract? b:FexprBlock
      %[ ArrowFn(range meta, k, p, contract t, b) ]%


  FexprBlock
    = "=>" e:Expression             %[ [| e |] ]%
    | "=>" "{" xs:Statement* "}"    %[ xs ]%

  Literal
    = String
    | Boolean
    | Decimal
    | Integer
    | Null

  String = s:string   %[ L_String(range meta, s) ]%
  Boolean = boolean
  Decimal = decimal
  Integer = integer
  Null = null_        %[ L_Null(range meta) ]%


  ArgList
    = "(" xs:ListOf<Argument, ","> ")"    %[ xs ]%

  Argument
    = "..." e:Expression        %[ A_Spread(range meta, e) ]%
    | k:Name ":" e:Expression   %[ A_Named(range meta, k, e) ]%
    | e:Expression              %[ A_Positional(range meta, e) ]%


  // -- Pattern matching ----------------------------------------------
  Match
    = match_ e:Expression "{" cs:MatchCase* "}"
      %[ MatchExpr(range meta, e, cs) ]%

  MatchCase
    = case_ p:Pattern when_ e:Expression ":" b:Statement*
      %[ MC_Guarded(range meta, p, e, b) ]%

    | case_ p:Pattern ":" b:Statement*
      %[ MC_Unguarded(range meta, p, b) ]%

    | default_ ":" b:Statement*
      %[ MC_Default(range meta, b) ]%

  Pattern
    = l:Literal
      %[ P_Literal(range meta, l) ]%

    | "[" k:ArrayPattern "]"
      %[ k (range meta) ]%

    | "{" ps:ListOf<PairPattern, ","> "}"
      %[ P_Record(range meta, ps) ]%

    | o:MemberExpression "(" ps:ListOf<Pattern, ","> ")"
      %[ P_Extractor(range meta, o, ps) ]%

    | p:Pattern t:Contract
      %[ P_Guarded(range meta, p, t) ]%

    | n:Name
      %[ P_Bind(range meta, n) ]%

  ArrayPattern
    = items:NonemptyListOf<Pattern, ","> "," "..." s:Pattern
      %[ box <| fun r -> P_SpreadArray(r, items, s) ]%

    | "..." s:Pattern
      %[ box <| fun r -> P_SpreadArray(r, [||], s) ]%

    | items:ListOf<Pattern, ",">
      %[ box <| fun r -> P_FixedArray(r, items) ]%

  PairPattern
    = k:Name ":" p:Pattern
      %[
        {
          range = range meta
          key = k
          pattern = p
        }
      ]%


  // --- Do blocks
  DoBlock
    = do_ e:Expression? "{" xs:Statement* "}"
      %[ Do(range meta, e, xs) ]%


  // -- Supporting ----------------------------------------------------
  Name
    = ~reserved id:id     %[ N_Id(range meta, id) ]%
    | "`" ids:id+ "`"     %[ N_Quoted(range meta, ids) ]%

  QualifiedName
    = NonemptyListOf<Name, ".">

  UnaryOp = unary_operator
  BinaryOp = binary_operator

  // -- Types ---------------------------------------------------------
  Contract
    = "::" t:TypeExpression   %[ t ]%

  // FIXME: proper type system
  TypeExpression
    = t:TypeExpression "?"
      %[ C_Option(range meta, t) ]%

    | l:TypeExpression "|" r:TypeExpression
      %[ C_Or(range meta, l, r) ]%

    | n:Name "<" ts:NonemptyListOf<TypeExpression, ","> ">"
      %[ C_Apply(range meta, n, ts) ]%

    | t:TypeExpression "." n:Name
      %[ C_Project(range meta, t, n) ]%

    | n:Name
      %[ C_Named(range meta, n) ]%


  // -- Lexical -------------------------------------------------------
  newline = "\n" | "\r"
  line = (~newline any)*
  comment = "//" line
  doc_comment = "/*" (~"*/" any)* "*/"
  space += comment

  id_start = letter | "_"
  id_rest = id_start | digit
  id = id_start id_rest*

  kw<word> = word ~id_rest

  reserved_var = "_" ~id_rest

  binary_operator
    = "=="      %[ OpEqual(range meta) ]%
    | ">="      %[ OpGreaterOrEqual(range meta) ]%
    | ">>"      %[ OpComposeRight(range meta) ]%
    | ">"       %[ OpGreater(range meta) ]%
    | "<="      %[ OpLessOrEqual(range meta) ]%
    | "<<"      %[ OpComposeLeft(range meta) ]%
    | "<"       %[ OpLess(range meta) ]%
    | "++"      %[ OpConcat(range meta) ]%
    | "+"       %[ OpPlus(range meta) ]%
    | "-->"     %[ OpImplies(range meta) ]%
    | "-"       %[ OpMinus(range meta) ]%
    | "**"      %[ OpPower(range meta) ]%
    | "*"       %[ OpTimes(range meta) ]%
    | "/="      %[ OpNotEqual(range meta) ]%
    | "/"       %[ OpDivide(range meta) ]%
    | and_      %[ OpAnd(range meta) ]%
    | or_       %[ OpOr(range meta) ]%
    | in_       %[ OpIn(range meta) ]%

  unary_operator
    = not_      %[ OpNot(range meta) ]%


  octal_digit = "0" .. "7" | "_"
  hex_digit = raw_hex_digit | "_"
  raw_hex_digit = "0" .. "9" | "a" .. "f" | "A" .. "F"
  bin_digit = "0" | "1" | "_"
  decimal_digit = "0" .. "9" | "_"

  integral_number
    = "0o" xs:octal_digit+    %[ octal xs ]%
    | "0x" xs:hex_digit+      %[ hex xs ]%
    | "0b" xs:bin_digit+      %[ binary xs ]%
    | ~"_" xs:decimal_digit+  %[ decimal xs ]%

  integer
    = "-" x:integral_number   %[ L_Number(range meta, Negative, x, "0", Integer) ]%
    | "+" x:integral_number   %[ L_Number(range meta, Positive, x, "0", Integer) ]%
    | x:integral_number       %[ L_Number(range meta, Unsigned, x, "0", Integer) ]%

  decimal
    = "-"  i:decimal_digit+ "." d:decimal_digit+ s:suffix
      %[ L_Number(range meta, Negative, decimal i, decimal d, s) ]%

    | "+"  i:decimal_digit+ "." d:decimal_digit+ s:suffix
      %[ L_Number(range meta, Positive, decimal i, decimal d, s) ]%

    | ~"_" i:decimal_digit+ "." d:decimal_digit+ s:suffix
      %[ L_Number(range meta, Unsigned, decimal i, decimal d, s) ]%

  suffix
    = "f"   %[ Float64 ]%
    |       %[ Decimal ]%

  boolean
    = true_     %[ L_Boolean(range meta, true) ]%
    | false_    %[ L_Boolean(range meta, false) ]%


  raw_character
    = ~"\"\"\"" any

  escape_sequence
    = "b"
    | "f"
    | "n"
    | "r"
    | "t"
    | "u" unicode_escape
    | "\""
    | "\\"

  unicode_escape
    = raw_hex_digit raw_hex_digit raw_hex_digit raw_hex_digit

  string_character
    = ~("\"" | "\\") any
    | "\\" escape_sequence

  double_string
    = "\"" string_character* "\""

  raw_string
    = "\"\"\"" xs:raw_character* "\"\"\""   %[ fixRawString (range meta) xs ]%

  string
    = raw_string
    | x:double_string   %[ parseJsonString x ]%


  import_ = kw<"import">
  exposing_ = kw<"exposing">
  as_ = kw<"as">
  everything_ = kw<"everything">
  export_ = kw<"export">
  external_ = kw<"external">
  module_ = kw<"module">

  record_ = kw<"record">
  union_ = kw<"union">
  mutable_ = kw<"mutable">

  function_ = kw<"function">
  define_ = kw<"define">

  let_ = kw<"let">
  assert_ = kw<"assert">
  unreachable_ = kw<"unreachable">
  for_ = kw<"for">
  each_ = kw<"each">
  of_ = kw<"of">
  repeat_ = kw<"repeat">
  while_ = kw<"while">
  until_ = kw<"until">
  with_ = kw<"with">
  from_ = kw<"from">
  to_ = kw<"to">
  by_ = kw<"by">

  yield_ = kw<"yield">
  if_ = kw<"if">
  then_ = kw<"then">
  else_ = kw<"else">
  in_ = kw<"in">
  and_ = kw<"and">
  or_ = kw<"or">
  not_ = kw<"not">
  new_ = kw<"new">
  lambda_ = kw<"fun">
  do_ = kw<"do">

  null_ = kw<"null">
  true_ = kw<"true">
  false_ = kw<"false">

  match_ = kw<"match">
  case_ = kw<"case">
  default_ = kw<"default">
  when_ = kw<"when">


  reserved =
    | assert_ | as_ | and_
    | by_
    | case_
    | define_ | default_ | do_
    | exposing_ | everything_ | export_ | each_ | else_ | external_
    | function_ | for_ | from_ | false_
    | import_ | if_ | in_
    | let_ | lambda_
    | mutable_ | match_ | module_
    | null_ | not_ | new_
    | of_ | or_
    | record_ | repeat_
    | to_ | then_ | true_
    | union_ | unreachable_ | until_
    | while_ | with_  | when_
    | yield_

}